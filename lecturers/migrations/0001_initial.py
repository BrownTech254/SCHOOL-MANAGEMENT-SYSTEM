# Generated by Django 5.2.4 on 2025-07-18 12:51

import django.db.models.deletion
import phonenumber_field.modelfields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Lecturer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(blank=True, max_length=255, null=True)),
                ('last_name', models.CharField(blank=True, max_length=255, null=True)),
                ('registration_number', models.CharField(blank=True, max_length=255, null=True)),
                ('is_registered', models.BooleanField(default=False)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='lecturer', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Academic_Background',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_of_secondary_school', models.CharField(blank=True, max_length=255, null=True)),
                ('index_number_of_secondary_school', models.CharField(blank=True, null=True)),
                ('year_of_completion_of_secondary_school', models.DateField(blank=True, null=True)),
                ('name_of_primary_school', models.CharField(blank=True, max_length=255, null=True)),
                ('index_number_of_primary_school', models.CharField(blank=True, null=True)),
                ('year_of_completion_of_primary_school', models.CharField(blank=True, null=True)),
                ('kcpe_results', models.TextField(blank=True, null=True)),
                ('any_other_institution_atttended_and_qualifications_attained', models.TextField(blank=True, null=True)),
                ('lecturer', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='student_academic_data', to='lecturers.lecturer')),
            ],
        ),
        migrations.CreateModel(
            name='Lecturer_Emergency_Contact_Persons',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name_a', models.CharField(blank=True, max_length=255, null=True)),
                ('last_name_a', models.CharField(blank=True, max_length=255, null=True)),
                ('email_a', models.EmailField(blank=True, max_length=254, null=True)),
                ('phone_number_a', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None)),
                ('postal_box_a', models.CharField(blank=True, null=True)),
                ('postal_code_a', models.CharField(blank=True, max_length=255, null=True)),
                ('postal_town_a', models.CharField(blank=True, max_length=255, null=True)),
                ('relationship_a', models.CharField(blank=True, max_length=255, null=True)),
                ('first_name_b', models.CharField(blank=True, max_length=255, null=True)),
                ('last_name_b', models.CharField(blank=True, max_length=255, null=True)),
                ('email_b', models.EmailField(blank=True, max_length=254, null=True)),
                ('phone_number_b', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None)),
                ('postal_box_b', models.CharField(blank=True, null=True)),
                ('postal_code_b', models.CharField(blank=True, max_length=255, null=True)),
                ('postal_town_b', models.CharField(blank=True, max_length=255, null=True)),
                ('relationship_b', models.CharField(blank=True, max_length=255, null=True)),
                ('lecturer', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='student_emmergency_contacts', to='lecturers.lecturer')),
            ],
        ),
        migrations.CreateModel(
            name='Lecturer_Family_Information',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('father_first_name', models.CharField(blank=True, max_length=255, null=True)),
                ('father_last_name', models.CharField(blank=True, max_length=255, null=True)),
                ('father_status', models.CharField(choices=[('Alive', 'Alive'), ('Deceased', 'Deceased'), ('Unknown', 'Unknown')], default='Alive', max_length=255)),
                ('father_occupation', models.CharField(blank=True, max_length=255, null=True)),
                ('father_date_of_birth', models.DateField(blank=True, null=True)),
                ('mother_first_name', models.CharField(blank=True, max_length=255, null=True)),
                ('mother_last_name', models.CharField(blank=True, max_length=255, null=True)),
                ('mother_status', models.CharField(choices=[('Alive', 'Alive'), ('Deceased', 'Deceased'), ('Unknown', 'Unknown')], default='Alive', max_length=255)),
                ('mother_occupation', models.CharField(blank=True, max_length=255, null=True)),
                ('mother_date_of_birth', models.DateField(blank=True, null=True)),
                ('number_of_brothers_and_sisters', models.CharField(blank=True, null=True)),
                ('lecturer', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='student_family', to='lecturers.lecturer')),
            ],
        ),
        migrations.CreateModel(
            name='Lecturer_Personal_Data',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(blank=True, max_length=255, null=True)),
                ('last_name', models.CharField(blank=True, max_length=255, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('passport_image', models.ImageField(blank=True, null=True, upload_to='student_photos')),
                ('national_id', models.CharField(blank=True, max_length=255, null=True)),
                ('huduma_number', models.CharField(blank=True, max_length=255, null=True)),
                ('date_of_birth', models.DateField(blank=True, max_length=255, null=True)),
                ('gender', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female'), ('Rather Not Say', 'Rather Not Say')], default='Rather Not Say', max_length=255)),
                ('marital_status', models.CharField(choices=[('Single', 'Single'), ('Married', 'Married'), ('Divorced', 'Divorced'), ('Widowed', 'Widowed'), ('Separated', 'Separated'), ('Other', 'Other'), ('Prefer not to say', 'Prefer not to say')], default='Single', max_length=255)),
                ('name_of_spouse_if_married', models.CharField(blank=True, max_length=255, null=True)),
                ('number_of_children_if_married', models.CharField(blank=True, null=True)),
                ('occupation_of_spouse_if_married', models.CharField(blank=True, max_length=255, null=True)),
                ('phone_number_of_spouse_if_married', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None)),
                ('physical_impairement', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=255)),
                ('if_physical_impairment', models.TextField(blank=True, null=True)),
                ('nhif_number', models.CharField(blank=True, max_length=255, null=True)),
                ('religion', models.CharField(choices=[('Christian', 'Christian'), ('Muslim', 'Muslim'), ('Hindu', 'Hindu'), ('Pagan', 'Pagan')], default='Pagan', max_length=255)),
                ('nationality', models.CharField(choices=[('Afghan', 'Afghan'), ('Albanian', 'Albanian'), ('Algerian', 'Algerian'), ('Andorran', 'Andorran'), ('Angolan', 'Angolan'), ('Antiguan and Barbudan', 'Antiguan and Barbudan'), ('Argentine', 'Argentine'), ('Armenian', 'Armenian'), ('Australian', 'Australian'), ('Austrian', 'Austrian'), ('Azerbaijani', 'Azerbaijani'), ('Bahamian', 'Bahamian'), ('Bahraini', 'Bahraini'), ('Bangladeshi', 'Bangladeshi'), ('Barbadian', 'Barbadian'), ('Belarusian', 'Belarusian'), ('Belgian', 'Belgian'), ('Belizean', 'Belizean'), ('Beninese', 'Beninese'), ('Bhutanese', 'Bhutanese'), ('Bolivian', 'Bolivian'), ('Bosnian and Herzegovinian', 'Bosnian and Herzegovinian'), ('Botswanan', 'Botswanan'), ('Brazilian', 'Brazilian'), ('Bruneian', 'Bruneian'), ('Bulgarian', 'Bulgarian'), ('Burkinabe', 'Burkinabe'), ('Burundian', 'Burundian'), ('Cambodian', 'Cambodian'), ('Cameroonian', 'Cameroonian'), ('Canadian', 'Canadian'), ('Cape Verdean', 'Cape Verdean'), ('Central African', 'Central African'), ('Chadian', 'Chadian'), ('Chilean', 'Chilean'), ('Chinese', 'Chinese'), ('Colombian', 'Colombian'), ('Comoran', 'Comoran'), ('Congolese (Republic)', 'Congolese'), ('Congolese (Dem. Rep.)', 'Congolese'), ('Costa Rican', 'Costa Rican'), ('Ivorian', 'Ivorian'), ('Croat', 'Croat'), ('Cuban', 'Cuban'), ('Cypriot', 'Cypriot'), ('Czech', 'Czech'), ('Danish', 'Danish'), ('Djiboutian', 'Djiboutian'), ('Dominican', 'Dominican'), ('Dominican (Rep.)', 'Dominican'), ('Ecuadorean', 'Ecuadorean'), ('Egyptian', 'Egyptian'), ('Salvadoran', 'Salvadoran'), ('Equatoguinean', 'Equatoguinean'), ('Eritrean', 'Eritrean'), ('Estonian', 'Estonian'), ('Ethiopian', 'Ethiopian'), ('Fijian', 'Fijian'), ('Finnish', 'Finnish'), ('French', 'French'), ('Gabonese', 'Gabonese'), ('Gambian', 'Gambian'), ('Georgian', 'Georgian'), ('German', 'German'), ('Ghanaian', 'Ghanaian'), ('Greek', 'Greek'), ('Grenadian', 'Grenadian'), ('Guatemalan', 'Guatemalan'), ('Guinean', 'Guinean'), ('Guinea-Bissauan', 'Guinea-Bissauan'), ('Guyanese', 'Guyanese'), ('Haitian', 'Haitian'), ('Honduran', 'Honduran'), ('Hungarian', 'Hungarian'), ('Icelander', 'Icelander'), ('Indian', 'Indian'), ('Indonesian', 'Indonesian'), ('Iranian', 'Iranian'), ('Iraqi', 'Iraqi'), ('Irish', 'Irish'), ('Israeli', 'Israeli'), ('Italian', 'Italian'), ('Jamaican', 'Jamaican'), ('Japanese', 'Japanese'), ('Jordanian', 'Jordanian'), ('Kazakhstani', 'Kazakhstani'), ('Kenyan', 'Kenyan'), ('I-Kiribati', 'I‑Kiribati'), ('North Korean', 'North Korean'), ('South Korean', 'South Korean'), ('Kosovar', 'Kosovar'), ('Kuwaiti', 'Kuwaiti'), ('Kyrgyzstani', 'Kyrgyzstani'), ('Lao', 'Lao'), ('Latvian', 'Latvian'), ('Lebanese', 'Lebanese'), ('Basotho', 'Basotho'), ('Liberian', 'Liberian'), ('Libyan', 'Libyan'), ('Liechtensteiner', 'Liechtensteiner'), ('Lithuanian', 'Lithuanian'), ('Luxembourger', 'Luxembourger'), ('Macedonian', 'Macedonian'), ('Malagasy', 'Malagasy'), ('Malawian', 'Malawian'), ('Malaysian', 'Malaysian'), ('Maldivian', 'Maldivian'), ('Malian', 'Malian'), ('Maltese', 'Maltese'), ('Marshallese', 'Marshallese'), ('Mauritanian', 'Mauritanian'), ('Mauritian', 'Mauritian'), ('Mexican', 'Mexican'), ('Micronesian', 'Micronesian'), ('Moldovan', 'Moldovan'), ('Monegasque', 'Monegasque'), ('Mongolian', 'Mongolian'), ('Montenegrin', 'Montenegrin'), ('Moroccan', 'Moroccan'), ('Mozambican', 'Mozambican'), ('Burmese', 'Burmese'), ('Namibian', 'Namibian'), ('Nauruan', 'Nauruan'), ('Nepalese', 'Nepalese'), ('Dutch', 'Dutch'), ('New Zealander', 'New Zealander'), ('Nicaraguan', 'Nicaraguan'), ('Nigerien', 'Nigerien'), ('Nigerian', 'Nigerian'), ('Norwegian', 'Norwegian'), ('Omani', 'Omani'), ('Pakistani', 'Pakistani'), ('Palauan', 'Palauan'), ('Palestinian', 'Palestinian'), ('Panamanian', 'Panamanian'), ('Papua New Guinean', 'Papua New Guinean'), ('Paraguayan', 'Paraguayan'), ('Peruvian', 'Peruvian'), ('Filipino', 'Filipino'), ('Pole', 'Pole'), ('Portuguese', 'Portuguese'), ('Qatari', 'Qatari'), ('Romanian', 'Romanian'), ('Russian', 'Russian'), ('Rwandan', 'Rwandan'), ('Saint Kitts and Nevis', 'Kittitian and Nevisian'), ('Saint Lucian', 'Saint Lucian'), ('Saint Vincentian', 'Saint Vincentian'), ('Samoan', 'Samoan'), ('Sammarinese', 'Sammarinese'), ('Sao Tomean', 'São Toméan'), ('Saudi Arabian', 'Saudi Arabian'), ('Senegalese', 'Senegalese'), ('Serbian', 'Serbian'), ('Seychellois', 'Seychellois'), ('Sierra Leonean', 'Sierra Leonean'), ('Singaporean', 'Singaporean'), ('Slovak', 'Slovak'), ('Slovenian', 'Slovenian'), ('Solomon Islander', 'Solomon Islander'), ('Somali', 'Somali'), ('South African', 'South African'), ('Spanish', 'Spanish'), ('Sri Lankan', 'Sri Lankan'), ('Sudanese', 'Sudanese'), ('Surinamese', 'Surinamese'), ('Swazi', 'Swazi'), ('Swedish', 'Swedish'), ('Swiss', 'Swiss'), ('Syrian', 'Syrian'), ('Taiwanese', 'Taiwanese'), ('Tajikistani', 'Tajikistani'), ('Tanzanian', 'Tanzanian'), ('Thai', 'Thai'), ('Timorese', 'Timorese'), ('Togolese', 'Togolese'), ('Tongan', 'Tongan'), ('Trinidadian and Tobagonian', 'Trinidadian and Tobagonian'), ('Tunisian', 'Tunisian'), ('Turkish', 'Turkish'), ('Turkmen', 'Turkmen'), ('Tuvaluan', 'Tuvaluan'), ('Ugandan', 'Ugandan'), ('Ukrainian', 'Ukrainian'), ('Emirati', 'Emirati'), ('British', 'British'), ('American', 'American'), ('Uruguayan', 'Uruguayan'), ('Uzbekistani', 'Uzbekistani'), ('Ni‑Vanuatu', 'Ni‑Vanuatu'), ('Vatican', 'Vatican'), ('Venezuelan', 'Venezuelan'), ('Vietnamese', 'Vietnamese'), ('Yemeni', 'Yemeni'), ('Zambian', 'Zambian'), ('Zimbabwean', 'Zimbabwean'), ('Other', 'Other'), ('Prefer not to say', 'Prefer not to say')], default='Kenyan', max_length=255)),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None)),
                ('postal_box', models.CharField(blank=True, null=True)),
                ('postal_code', models.CharField(blank=True, max_length=255, null=True)),
                ('postal_town', models.CharField(blank=True, max_length=255, null=True)),
                ('lecturer', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='personal_data', to='lecturers.lecturer')),
            ],
        ),
        migrations.CreateModel(
            name='Lecturer_Residence',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('place_of_birth', models.CharField(blank=True, max_length=255, null=True)),
                ('place_of_permanent_residence', models.CharField(blank=True, max_length=255, null=True)),
                ('nearest_town', models.CharField(blank=True, max_length=255, null=True)),
                ('location', models.CharField(blank=True, max_length=255, null=True)),
                ('name_of_chief', models.CharField(blank=True, max_length=255, null=True)),
                ('county', models.CharField(choices=[('Baringo', 'Baringo'), ('Bomet', 'Bomet'), ('Bungoma', 'Bungoma'), ('Busia', 'Busia'), ('Elgeyo-Marakwet', 'Elgeyo-Marakwet'), ('Embu', 'Embu'), ('Garissa', 'Garissa'), ('Homa Bay', 'Homa Bay'), ('Isiolo', 'Isiolo'), ('Kajiado', 'Kajiado'), ('Kakamega', 'Kakamega'), ('Kericho', 'Kericho'), ('Kiambu', 'Kiambu'), ('Kilifi', 'Kilifi'), ('Kirinyaga', 'Kirinyaga'), ('Kisii', 'Kisii'), ('Kisumu', 'Kisumu'), ('Kitui', 'Kitui'), ('Kwale', 'Kwale'), ('Laikipia', 'Laikipia'), ('Lamu', 'Lamu'), ('Machakos', 'Machakos'), ('Makueni', 'Makueni'), ('Mandera', 'Mandera'), ('Marsabit', 'Marsabit'), ('Meru', 'Meru'), ('Migori', 'Migori'), ('Mombasa', 'Mombasa'), ("Murang'a", "Murang'a"), ('Nairobi', 'Nairobi'), ('Nakuru', 'Nakuru'), ('Nandi', 'Nandi'), ('Narok', 'Narok'), ('Nyamira', 'Nyamira'), ('Nyandarua', 'Nyandarua'), ('Nyeri', 'Nyeri'), ('Samburu', 'Samburu'), ('Siaya', 'Siaya'), ('Taita-Taveta', 'Taita-Taveta'), ('Tana River', 'Tana River'), ('Tharaka-Nithi', 'Tharaka-Nithi'), ('Trans Nzoia', 'Trans Nzoia'), ('Turkana', 'Turkana'), ('Uasin Gishu', 'Uasin Gishu'), ('Vihiga', 'Vihiga'), ('Wajir', 'Wajir'), ('West Pokot', 'West Pokot')], default='Nairobi', max_length=255)),
                ('sub_county', models.CharField(blank=True, max_length=255, null=True)),
                ('constituency', models.CharField(blank=True, max_length=255, null=True)),
                ('nearest_police_station', models.CharField(blank=True, max_length=255, null=True)),
                ('lecturer', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='student_residence', to='lecturers.lecturer')),
            ],
        ),
    ]
